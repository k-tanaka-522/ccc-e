#!/bin/bash
# Architect Agent - „Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®à„ÉªAWSÊßãÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà

# Ë®≠ÂÆö
AGENT_NAME="Architect Agent"
AGENT_VERSION="1.0.0"
REQUIREMENTS_DIR="../requirements"
OUTPUT_DIR="../architecture"
AWS_DIR="../aws"
TEMPLATES_DIR="templates/aws"

# „É≠„Ç∞Èñ¢Êï∞
log_info() {
    echo -e "\033[1;34m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[1;32m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1"
}

log_warn() {
    echo -e "\033[1;33m[WARN]\033[0m $1"
}

# ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË°®Á§∫
show_usage() {
    cat << EOF
üèóÔ∏è Architect Agent v${AGENT_VERSION}
==================================

‰ΩøÁî®ÊñπÊ≥ï:
  $0 [„Ç™„Éó„Ç∑„Éß„É≥]

„Ç™„Éó„Ç∑„Éß„É≥:
  --analyze      Ë¶Å‰ª∂ÂÆöÁæ©„Åã„Çâ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíÂàÜÊûê„ÉªË®≠Ë®à
  --generate     CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁîüÊàê
  --diagram      „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥„ÇíÁîüÊàê
  --estimate     „Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä„ÇíË®àÁÆó
  --validate     Ë®≠Ë®à„ÅÆÂ¶•ÂΩìÊÄß„ÇíÊ§úË®º
  --export       Ë®≠Ë®àÊõ∏„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà
  --help         „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫

‰æã:
  $0 --analyze
  $0 --generate --pattern container
  $0 --diagram
  $0 --estimate

EOF
}

# ÂàùÊúüÂåñ
init_architect() {
    log_info "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉàÁí∞Â¢É„ÇíÂàùÊúüÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    # „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
    mkdir -p "$OUTPUT_DIR" "$AWS_DIR" logs tmp
    mkdir -p "$OUTPUT_DIR/diagrams"
    
    log_success "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉàÁí∞Â¢É„ÅÆÂàùÊúüÂåñÂÆå‰∫Ü"
}

# Ë¶Å‰ª∂ÂÆöÁæ©„ÅÆË™≠„ÅøËæº„Åø
load_requirements() {
    if [ ! -f "$REQUIREMENTS_DIR/requirements.md" ]; then
        log_error "Ë¶Å‰ª∂ÂÆöÁæ©Êõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $REQUIREMENTS_DIR/requirements.md"
        log_info "„Åæ„Åö Requirements Agent „ÅßË¶Å‰ª∂ÂÆöÁæ©„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        return 1
    fi
    
    log_info "Ë¶Å‰ª∂ÂÆöÁæ©„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô..."
    
    # Ë¶Å‰ª∂„Åã„Çâ‰∏ªË¶Å„Éë„É©„É°„Éº„Çø„ÇíÊäΩÂá∫
    CONCURRENT_USERS=$(grep -o "ÊÉ≥ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞.*[0-9]\+" "$REQUIREMENTS_DIR/requirements.md" | grep -o "[0-9]\+" | head -1)
    SLO=$(grep -o "ÂèØÁî®ÊÄßÁõÆÊ®ô.*[0-9]\+\.[0-9]\+%" "$REQUIREMENTS_DIR/requirements.md" | grep -o "[0-9]\+\.[0-9]\+%" | head -1)
    RESPONSE_TIME=$(grep -o "„É¨„Çπ„Éù„É≥„Çπ„Çø„Ç§„É†.*[0-9]\+" "$REQUIREMENTS_DIR/requirements.md" | grep -o "[0-9]\+" | head -1)
    COST_LIMIT=$(grep -o "„Ç≥„Çπ„Éà‰∏äÈôê.*[0-9]\+" "$REQUIREMENTS_DIR/requirements.md" | grep -o "[0-9]\+" | head -1)
    REGION=$(grep -o "„É™„Éº„Ç∏„Éß„É≥.*[a-z].*-[a-z].*-[0-9]" "$REQUIREMENTS_DIR/requirements.md" | grep -o "[a-z].*-[a-z].*-[0-9]" | head -1)
    
    # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅÆË®≠ÂÆö
    CONCURRENT_USERS=${CONCURRENT_USERS:-1000}
    SLO=${SLO:-99.9%}
    RESPONSE_TIME=${RESPONSE_TIME:-2}
    COST_LIMIT=${COST_LIMIT:-500}
    REGION=${REGION:-us-east-1}
    
    log_success "Ë¶Å‰ª∂ÂÆöÁæ©„ÅÆË™≠„ÅøËæº„ÅøÂÆå‰∫Ü"
    log_info "ÊÉ≥ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞: $CONCURRENT_USERS, SLO: $SLO, ÂøúÁ≠îÊôÇÈñì: ${RESPONSE_TIME}Áßí, „Ç≥„Çπ„Éà‰∏äÈôê: ${COST_LIMIT}USD, „É™„Éº„Ç∏„Éß„É≥: $REGION"
}

# „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥„ÅÆÊ±∫ÂÆö
determine_architecture_pattern() {
    log_info "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥„ÇíÊ±∫ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    # „É¶„Éº„Ç∂„ÉºÊï∞„Å®SLO„Å´Âü∫„Å•„Åè„Éë„Çø„Éº„É≥Ê±∫ÂÆö
    if [ "$CONCURRENT_USERS" -lt 100 ]; then
        PATTERN="simple"
        PATTERN_NAME="„Ç∑„É≥„Éó„É´ÊßãÊàê"
        PATTERN_DESC="EC2 + RDS"
    elif [ "$CONCURRENT_USERS" -lt 10000 ] && [[ "$SLO" == "99.9%" || "$SLO" == "99.95%" ]]; then
        PATTERN="container"
        PATTERN_NAME="„Ç≥„É≥„ÉÜ„ÉäÊßãÊàê"
        PATTERN_DESC="ECS + RDS + ElastiCache"
    else
        PATTERN="serverless"
        PATTERN_NAME="„Çµ„Éº„Éê„Éº„É¨„ÇπÊßãÊàê"
        PATTERN_DESC="Lambda + DynamoDB + API Gateway"
    fi
    
    log_success "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥Ê±∫ÂÆö: $PATTERN_NAME ($PATTERN_DESC)"
}

# „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÂàÜÊûê
analyze_architecture() {
    log_info "Ë¶Å‰ª∂ÂÆöÁæ©„Åã„Çâ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíÂàÜÊûê„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    # Ë¶Å‰ª∂ÂÆöÁæ©„ÅÆË™≠„ÅøËæº„Åø
    if ! load_requirements; then
        return 1
    fi
    
    # „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥Ê±∫ÂÆö
    determine_architecture_pattern
    
    # Ë®≠Ë®àÊõ∏„ÅÆÁîüÊàê
    generate_design_document
    
    log_success "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÂàÜÊûêÂÆå‰∫Ü"
}

# Ë®≠Ë®àÊõ∏„ÅÆÁîüÊàê
generate_design_document() {
    log_info "Ë®≠Ë®àÊõ∏„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    cat > "$OUTPUT_DIR/design.md" << EOF
# „Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®àÊõ∏

## Ê¶ÇË¶Å
- **ÁîüÊàêÊó•**: $(date -I)
- **ÁîüÊàêËÄÖ**: Architect Agent v${AGENT_VERSION}
- **Ë¶Å‰ª∂ÂÆöÁæ©**: $REQUIREMENTS_DIR/requirements.md

## „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Ê¶ÇË¶Å

### ÈÅ∏Êäû„Éë„Çø„Éº„É≥
- **„Éë„Çø„Éº„É≥**: $PATTERN_NAME
- **Ë™¨Êòé**: $PATTERN_DESC
- **ÈÅ∏ÊäûÁêÜÁî±**: ÊÉ≥ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞ ${CONCURRENT_USERS}‰∫∫„ÄÅSLO ${SLO} „Å´ÊúÄÈÅ©

### „Ç∑„Çπ„ÉÜ„É†ÊßãÊàê

$(generate_architecture_components)

### ÈùûÊ©üËÉΩË¶Å‰ª∂„Å∏„ÅÆÂØæÂøú

#### ÂèØÁî®ÊÄß ($SLO)
$(generate_availability_design)

#### ÊÄßËÉΩ (${RESPONSE_TIME}Áßí‰ª•ÂÜÖ)
$(generate_performance_design)

#### „Çª„Ç≠„É•„É™„ÉÜ„Ç£
$(generate_security_design)

#### „Ç≥„Çπ„Éà ($COST_LIMIT USD/Êúà)
$(generate_cost_design)

## „Ç§„É≥„Éï„É©ÊßãÊàê

### AWS „É™„ÇΩ„Éº„Çπ
$(generate_aws_resources)

### „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÊàê
$(generate_network_design)

### „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à
$(generate_database_design)

### Áõ£Ë¶ñ„Éª„É≠„Ç∞
$(generate_monitoring_design)

## „Éá„Éó„É≠„Ç§Êà¶Áï•
$(generate_deployment_strategy)

## ÈÅãÁî®ËÄÉÊÖÆ‰∫ãÈ†Ö
$(generate_operational_considerations)

## Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó
1. CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê: \`architect/agent.sh --generate\`
2. „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥ÁîüÊàê: \`architect/agent.sh --diagram\`
3. „Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä: \`architect/agent.sh --estimate\`

EOF
    
    log_success "Ë®≠Ë®àÊõ∏„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: $OUTPUT_DIR/design.md"
}

# „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÁîüÊàê
generate_architecture_components() {
    case "$PATTERN" in
        "simple")
            cat << EOF
#### „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ
- **Web Server**: EC2 (t3.medium) + Nginx
- **SSLÁµÇÁ´Ø**: Application Load Balancer

#### „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ  
- **„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥**: EC2 (t3.medium) √ó 2Âè∞
- **„Éá„Éº„Çø„Éô„Éº„Çπ**: RDS MySQL (t3.small)
- **„Éï„Ç°„Ç§„É´„Çπ„Éà„É¨„Éº„Ç∏**: S3

#### CDN„Éª„Ç≠„É£„ÉÉ„Ç∑„É•
- **CDN**: CloudFront
- **„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ**: ElastiCache Redis (cache.t3.micro)
EOF
            ;;
        "container")
            cat << EOF
#### „Ç≥„É≥„ÉÜ„ÉäÂü∫Áõ§
- **„Ç≥„É≥„ÉÜ„Éä**: ECS Fargate
- **„É≠„Éº„Éâ„Éê„É©„É≥„Çµ„Éº**: Application Load Balancer
- **„Çµ„Éº„Éì„Çπ„Éá„Ç£„Çπ„Ç´„Éê„É™**: ECS Service Discovery

#### „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ
- **„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥**: ECS Service (CPU: 1024, Memory: 2048)
- **„Éá„Éº„Çø„Éô„Éº„Çπ**: RDS MySQL Multi-AZ (t3.medium)
- **„Ç≠„É£„ÉÉ„Ç∑„É•**: ElastiCache Redis Cluster

#### CI/CD
- **„Éì„É´„Éâ**: CodeBuild
- **„Éá„Éó„É≠„Ç§**: CodeDeploy + ECS
- **„Ç§„É°„Éº„Ç∏**: ECR
EOF
            ;;
        "serverless")
            cat << EOF
#### „Çµ„Éº„Éê„Éº„É¨„ÇπÂü∫Áõ§
- **API**: API Gateway + Lambda
- **Ë™çË®º**: Cognito User Pools
- **„Éï„Ç°„Ç§„É´Âá¶ÁêÜ**: Lambda + S3 Event

#### „Éá„Éº„ÇøÂ±§
- **„É°„Ç§„É≥DB**: DynamoDB
- **Ê§úÁ¥¢**: OpenSearch Service
- **„Éï„Ç°„Ç§„É´„Çπ„Éà„É¨„Éº„Ç∏**: S3

#### Áõ£Ë¶ñ„Éª„É≠„Ç∞
- **„É≠„Ç∞**: CloudWatch Logs
- **„É°„Éà„É™„ÇØ„Çπ**: CloudWatch + X-Ray
- **„Ç¢„É©„Éº„Éà**: SNS + Lambda
EOF
            ;;
    esac
}

# ÂèØÁî®ÊÄßË®≠Ë®à„ÅÆÁîüÊàê
generate_availability_design() {
    case "$SLO" in
        "99.0%")
            echo "- „Ç∑„É≥„Ç∞„É´AZÊßãÊàê„ÅßÂçÅÂàÜ"
            echo "- RDS„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó: 7Êó•Èñì‰øùÊåÅ"
            echo "- ÊâãÂãïÂæ©Êóß„Éó„É≠„Çª„Çπ"
            ;;
        "99.9%")
            echo "- Multi-AZÊßãÊàê"
            echo "- RDSËá™Âãï„Éï„Çß„Ç§„É´„Ç™„Éº„Éê„Éº"
            echo "- Auto Scaling Group (min: 2, max: 10)"
            echo "- CloudWatch „Ç¢„É©„Éº„ÉàË®≠ÂÆö"
            ;;
        "99.95%"|"99.99%")
            echo "- Multi-RegionÊßãÊàêÊ§úË®é"
            echo "- RDS Multi-AZ + Read Replica"
            echo "- Auto Scaling Group (min: 3, max: 20)"
            echo "- Route 53 Health Check"
            echo "- Ëá™ÂãïÂæ©Êóß„Çπ„ÇØ„É™„Éó„Éà"
            ;;
    esac
}

# ÊÄßËÉΩË®≠Ë®à„ÅÆÁîüÊàê
generate_performance_design() {
    echo "- CDN (CloudFront) „Åß„Ç∞„É≠„Éº„Éê„É´ÈÖç‰ø°"
    echo "- ElastiCache „Åß DBË≤†Ëç∑ËªΩÊ∏õ"
    echo "- Auto Scaling „ÅßË≤†Ëç∑ÂØæÂøú"
    
    if [ "$CONCURRENT_USERS" -gt 1000 ]; then
        echo "- Connection pooling Ë®≠ÂÆö"
        echo "- Database read replica"
        echo "- Static asset „ÅÆ S3 + CloudFront ÈÖç‰ø°"
    fi
}

# „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠Ë®à„ÅÆÁîüÊàê
generate_security_design() {
    echo "- VPC „Åß„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂàÜÈõ¢"
    echo "- Security Group „ÅßÊúÄÂ∞èÊ®©Èôê„Ç¢„ÇØ„Çª„Çπ"
    echo "- SSL/TLSÊöóÂè∑Âåñ (ALB + ACM)"
    echo "- RDSÊöóÂè∑ÂåñÊúâÂäπ"
    echo "- S3 ÊöóÂè∑ÂåñÊúâÂäπ"
    echo "- IAM Role „Å´„Çà„ÇãÊúÄÂ∞èÊ®©Èôê„Ç¢„ÇØ„Çª„Çπ"
    echo "- CloudTrail „ÅßAPIÁõ£Êüª"
    echo "- GuardDuty „ÅßËÑÖÂ®ÅÊ§úÁü•"
}

# „Ç≥„Çπ„ÉàË®≠Ë®à„ÅÆÁîüÊàê
generate_cost_design() {
    echo "- ÊúàÈ°çÊ¶ÇÁÆó: $COST_LIMIT USD ‰ª•ÂÜÖ„ÅßË®≠Ë®à"
    echo "- Reserved Instance Ê¥ªÁî®„Åß„Ç≥„Çπ„ÉàÂâäÊ∏õ"
    echo "- Auto Scaling „ÅßÁÑ°ÈßÑ„Å™„É™„ÇΩ„Éº„ÇπÂâäÊ∏õ"
    echo "- S3 Intelligent-Tiering „Åß„Çπ„Éà„É¨„Éº„Ç∏ÊúÄÈÅ©Âåñ"
    echo "- CloudWatch „Åß„Ç≥„Çπ„ÉàÁõ£Ë¶ñ"
}

# AWS„É™„ÇΩ„Éº„Çπ„ÅÆÁîüÊàê
generate_aws_resources() {
    case "$PATTERN" in
        "simple")
            cat << EOF
- **VPC**: 1ÂÄã (10.0.0.0/16)
- **Subnet**: Public√ó2, Private√ó2
- **EC2**: t3.medium √ó 2Âè∞
- **RDS**: MySQL t3.small
- **ElastiCache**: Redis cache.t3.micro
- **ALB**: Application Load Balancer
- **S3**: 2„Éê„Ç±„ÉÉ„Éà (app, backup)
- **CloudFront**: 1„Éá„Ç£„Çπ„Éà„É™„Éì„É•„Éº„Ç∑„Éß„É≥
EOF
            ;;
        "container")
            cat << EOF
- **ECS Cluster**: 1ÂÄã
- **ECS Service**: 2ÂÄã (Frontend, Backend)
- **Task Definition**: Fargate 1vCPU, 2GB
- **RDS**: MySQL t3.medium Multi-AZ
- **ElastiCache**: Redis cluster mode
- **ECR**: 3„É™„Éù„Ç∏„Éà„É™
- **CodeBuild**: CI/CD„Éó„É≠„Ç∏„Çß„ÇØ„Éà
EOF
            ;;
        "serverless")
            cat << EOF
- **Lambda**: 5-10Èñ¢Êï∞
- **API Gateway**: REST API
- **DynamoDB**: 3-5„ÉÜ„Éº„Éñ„É´
- **Cognito**: User Pool + Identity Pool
- **S3**: 3„Éê„Ç±„ÉÉ„Éà
- **CloudWatch**: Logs + Metrics
- **X-Ray**: ÂàÜÊï£„Éà„É¨„Éº„Ç∑„É≥„Ç∞
EOF
            ;;
    esac
}

# „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®≠Ë®à„ÅÆÁîüÊàê
generate_network_design() {
    echo "- **VPC**: $REGION „Å´ÈÖçÁΩÆ"
    echo "- **Public Subnet**: ALB, NAT Gateway"
    echo "- **Private Subnet**: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥, „Éá„Éº„Çø„Éô„Éº„Çπ"
    echo "- **Internet Gateway**: Â§ñÈÉ®Êé•Á∂ö"
    echo "- **NAT Gateway**: „Éó„É©„Ç§„Éô„Éº„Éà„Çµ„Éñ„Éç„ÉÉ„Éà„ÅÆÂ§ñÈÉ®Êé•Á∂ö"
    echo "- **Route Table**: ÈÅ©Âàá„Å™„É´„Éº„ÉÜ„Ç£„É≥„Ç∞Ë®≠ÂÆö"
}

# „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„ÅÆÁîüÊàê
generate_database_design() {
    case "$PATTERN" in
        "simple"|"container")
            echo "- **„Ç®„É≥„Ç∏„É≥**: MySQL 8.0"
            echo "- **„Ç§„É≥„Çπ„Çø„É≥„Çπ**: $([[ "$PATTERN" == "container" ]] && echo "t3.medium" || echo "t3.small")"
            echo "- **„Çπ„Éà„É¨„Éº„Ç∏**: GP2 SSD 100GB"
            echo "- **„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó**: 7Êó•Èñì‰øùÊåÅ"
            echo "- **ÊöóÂè∑Âåñ**: ÊúâÂäπ"
            ;;
        "serverless")
            echo "- **„É°„Ç§„É≥DB**: DynamoDB"
            echo "- **„Éë„Éº„ÉÜ„Ç£„Ç∑„Éß„É≥„Ç≠„ÉºË®≠Ë®à**: „Ç¢„ÇØ„Çª„Çπ„Éë„Çø„Éº„É≥ÊúÄÈÅ©Âåñ"
            echo "- **GSI**: „ÇØ„Ç®„É™„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂêë‰∏ä"
            echo "- **„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó**: Point-in-time recovery"
            ;;
    esac
}

# Áõ£Ë¶ñË®≠Ë®à„ÅÆÁîüÊàê
generate_monitoring_design() {
    echo "- **„É°„Éà„É™„ÇØ„Çπ**: CloudWatch (CPU, Memory, Disk, Network)"
    echo "- **„É≠„Ç∞**: CloudWatch Logs"
    echo "- **„Ç¢„É©„Éº„Éà**: SNSÈÄöÁü•"
    echo "- **„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ**: CloudWatch Dashboard"
    
    if [[ "$PATTERN" == "serverless" ]]; then
        echo "- **„Éà„É¨„Éº„Ç∑„É≥„Ç∞**: X-Ray"
        echo "- **„Ç®„É©„ÉºËøΩË∑°**: Lambda Error tracking"
    fi
}

# „Éá„Éó„É≠„Ç§Êà¶Áï•„ÅÆÁîüÊàê
generate_deployment_strategy() {
    case "$PATTERN" in
        "simple")
            echo "- **Blue/Green „Éá„Éó„É≠„Ç§**: ALB Target GroupÂàá„ÇäÊõø„Åà"
            echo "- **„É≠„Éº„É´„Éê„ÉÉ„ÇØ**: Ââç„Éê„Éº„Ç∏„Éß„É≥„Å´Âç≥Â∫ßÂàá„ÇäÊàª„Åó"
            ;;
        "container")
            echo "- **Rolling „Éá„Éó„É≠„Ç§**: ECS Service Êõ¥Êñ∞"
            echo "- **„Ç´„Éä„É™„Ç¢„Éá„Éó„É≠„Ç§**: ÊÆµÈöéÁöÑ„Éà„É©„Éï„Ç£„ÉÉ„ÇØÁßªË°å"
            echo "- **CI/CD**: CodePipeline + CodeDeploy"
            ;;
        "serverless")
            echo "- **Alias „Éá„Éó„É≠„Ç§**: Lambda Version + Alias"
            echo "- **ÊÆµÈöéÁöÑ„Éá„Éó„É≠„Ç§**: API Gateway Stage"
            echo "- **SAM/CDK**: Infrastructure as Code"
            ;;
    esac
}

# ÈÅãÁî®ËÄÉÊÖÆ‰∫ãÈ†Ö„ÅÆÁîüÊàê
generate_operational_considerations() {
    cat << EOF
### „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÊà¶Áï•
- „Éá„Éº„Çø„Éô„Éº„Çπ: Ëá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó + ÊâãÂãï„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà
- „Éï„Ç°„Ç§„É´: S3 Cross-Region Replication
- Ë®≠ÂÆö: Infrastructure as Code „Åß„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ

### Áõ£Ë¶ñ„Éª„Ç¢„É©„Éº„Éà
- CPU‰ΩøÁî®Áéá > 80% „Åß„Ç¢„É©„Éº„Éà
- Error rate > 1% „Åß„Ç¢„É©„Éº„Éà
- Response time > ${RESPONSE_TIME}Áßí „Åß„Ç¢„É©„Éº„Éà
- ÂèØÁî®ÊÄß < ${SLO} „Åß„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥

### „Çª„Ç≠„É•„É™„ÉÜ„Ç£ÈÅãÁî®
- ÂÆöÊúüÁöÑ„Å™ËÑÜÂº±ÊÄß„Çπ„Ç≠„É£„É≥
- „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÅÆÁõ£Ë¶ñ
- ‰∏çÊ≠£„Ç¢„ÇØ„Çª„ÇπÊ§úÁü• (GuardDuty)
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éë„ÉÉ„ÉÅ„ÅÆÂÆöÊúüÈÅ©Áî®

### „Ç≥„Çπ„ÉàÁÆ°ÁêÜ
- ÊúàÊ¨°„Ç≥„Çπ„Éà„É¨„Éì„É•„Éº
- Êú™‰ΩøÁî®„É™„ÇΩ„Éº„Çπ„ÅÆÂÆöÊúü„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
- Reserved Instance „ÅÆÂÆöÊúüË¶ãÁõ¥„Åó
EOF
}

# CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê
generate_cloudformation() {
    local pattern="$1"
    pattern=${pattern:-$PATTERN}
    
    log_info "CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    case "$pattern" in
        "simple")
            generate_simple_cloudformation
            ;;
        "container")
            generate_container_cloudformation
            ;;
        "serverless")
            generate_serverless_cloudformation
            ;;
        *)
            log_error "‰∏çÊòé„Å™„Éë„Çø„Éº„É≥: $pattern"
            return 1
            ;;
    esac
    
    log_success "CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàêÂÆå‰∫Ü: $AWS_DIR/cloudformation.yaml"
}

# „Ç∑„É≥„Éó„É´ÊßãÊàê„ÅÆCloudFormation
generate_simple_cloudformation() {
    cat > "$AWS_DIR/cloudformation.yaml" << 'EOF'
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple Web Application Stack'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-subnet-2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.12.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-2

  # NAT Gateway
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-routes-1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-alb-sg
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-web-sg
      GroupDescription: Security group for web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-db-sg
      GroupDescription: Security group for database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Environment}-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP

  # Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Environment}-launch-template
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from ${Environment} environment</h1>" > /var/www/html/index.html
            echo "OK" > /var/www/html/health

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Environment}-asg
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 10
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${Environment}-db-subnet-group
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDS Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${Environment}-database
      DBInstanceClass: db.t3.small
      Engine: mysql
      EngineVersion: '8.0'
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}'
      AllocatedStorage: 100
      StorageType: gp2
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false

  # Database Secret
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Environment}-database-secret
      Description: RDS database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-app-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${Environment}-LoadBalancerURL

  DatabaseEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${Environment}-DatabaseEndpoint
EOF
}

# „Ç≥„É≥„ÉÜ„ÉäÊßãÊàê„ÅÆCloudFormation
generate_container_cloudformation() {
    cat > "$AWS_DIR/cloudformation.yaml" << 'EOF'
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Container-based Web Application Stack with ECS'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  AppImage:
    Type: String
    Default: nginx:latest
    Description: Docker image for the application

Resources:
  # VPC (Âêå„ÅòÊßãÊàê)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: app
          Image: !Ref AppImage
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${Environment}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  # IAM Roles
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${Environment}-app
      RetentionInDays: 30

  # Security Group for ECS
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Auto Scaling
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${Environment}-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

Outputs:
  ClusterName:
    Description: ECS cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${Environment}-ClusterName

  ServiceName:
    Description: ECS service name
    Value: !Ref ECSService
    Export:
      Name: !Sub ${Environment}-ServiceName
EOF
}

# „Çµ„Éº„Éê„Éº„É¨„ÇπÊßãÊàê„ÅÆCloudFormation
generate_serverless_cloudformation() {
    cat > "$AWS_DIR/cloudformation.yaml" << 'EOF'
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Web Application Stack'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${Environment}-api
      Description: Serverless API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-api-handler
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Hello from Lambda!'})
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref DynamoDBTable

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-app-data
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn

  # S3 Bucket for static assets
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-static-assets-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticAssetsBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: ApiOrigin
            DomainName: !Sub ${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${Environment}-ApiUrl

  CloudFrontUrl:
    Description: CloudFront distribution URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}
    Export:
      Name: !Sub ${Environment}-CloudFrontUrl

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub ${Environment}-DynamoDBTableName
EOF
}

# „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥„ÅÆÁîüÊàê
generate_diagram() {
    log_info "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    # MermaidÂΩ¢Âºè„Åß„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥„ÇíÁîüÊàê
    case "$PATTERN" in
        "simple")
            generate_simple_diagram
            ;;
        "container")
            generate_container_diagram
            ;;
        "serverless")
            generate_serverless_diagram
            ;;
    esac
    
    log_success "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: $OUTPUT_DIR/diagrams/"
}

# „Ç∑„É≥„Éó„É´ÊßãÊàê„ÅÆÂõ≥
generate_simple_diagram() {
    cat > "$OUTPUT_DIR/diagrams/architecture.mmd" << 'EOF'
graph TB
    Users[üë• Users] --> CF[CloudFront]
    CF --> ALB[Application Load Balancer]
    ALB --> EC2_1[EC2 Instance 1]
    ALB --> EC2_2[EC2 Instance 2]
    
    EC2_1 --> Cache[ElastiCache Redis]
    EC2_2 --> Cache
    EC2_1 --> RDS[(RDS MySQL)]
    EC2_2 --> RDS
    
    EC2_1 --> S3[S3 Bucket]
    EC2_2 --> S3
    
    subgraph "VPC"
        subgraph "Public Subnet"
            ALB
            NAT[NAT Gateway]
        end
        
        subgraph "Private Subnet"
            EC2_1
            EC2_2
            Cache
            RDS
        end
    end
    
    classDef compute fill:#ff9999
    classDef storage fill:#99ccff
    classDef network fill:#99ff99
    
    class EC2_1,EC2_2 compute
    class RDS,S3,Cache storage
    class ALB,CF,NAT network
EOF

    # PlantUMLÂΩ¢Âºè„ÇÇÁîüÊàê
    cat > "$OUTPUT_DIR/diagrams/architecture.puml" << 'EOF'
@startuml
!theme plain
skinparam backgroundColor white

cloud "Internet" as internet
rectangle "CloudFront" as cf
rectangle "Application Load Balancer" as alb

rectangle "VPC" {
    rectangle "Public Subnet" {
        rectangle "NAT Gateway" as nat
    }
    
    rectangle "Private Subnet" {
        rectangle "EC2 Instance 1" as ec2_1
        rectangle "EC2 Instance 2" as ec2_2
        database "RDS MySQL" as rds
        database "ElastiCache Redis" as cache
    }
}

cloud "S3 Bucket" as s3

internet --> cf
cf --> alb
alb --> ec2_1
alb --> ec2_2
ec2_1 --> rds
ec2_2 --> rds
ec2_1 --> cache
ec2_2 --> cache
ec2_1 --> s3
ec2_2 --> s3

@enduml
EOF
}

# „Ç≥„É≥„ÉÜ„ÉäÊßãÊàê„ÅÆÂõ≥
generate_container_diagram() {
    cat > "$OUTPUT_DIR/diagrams/architecture.mmd" << 'EOF'
graph TB
    Users[üë• Users] --> ALB[Application Load Balancer]
    ALB --> ECS[ECS Service]
    
    subgraph "ECS Cluster"
        ECS --> Task1[Fargate Task 1]
        ECS --> Task2[Fargate Task 2]
    end
    
    Task1 --> RDS[(RDS MySQL Multi-AZ)]
    Task2 --> RDS
    Task1 --> Cache[ElastiCache Redis Cluster]
    Task2 --> Cache
    
    subgraph "CI/CD Pipeline"
        Code[Source Code] --> CodeBuild[CodeBuild]
        CodeBuild --> ECR[ECR Repository]
        ECR --> Deploy[CodeDeploy]
        Deploy --> ECS
    end
    
    subgraph "VPC"
        subgraph "Public Subnet"
            ALB
        end
        
        subgraph "Private Subnet"
            ECS
            RDS
            Cache
        end
    end
    
    classDef container fill:#ff9999
    classDef storage fill:#99ccff
    classDef cicd fill:#ffcc99
    
    class Task1,Task2,ECS container
    class RDS,Cache,ECR storage
    class CodeBuild,Deploy cicd
EOF
}

# „Çµ„Éº„Éê„Éº„É¨„ÇπÊßãÊàê„ÅÆÂõ≥
generate_serverless_diagram() {
    cat > "$OUTPUT_DIR/diagrams/architecture.mmd" << 'EOF'
graph TB
    Users[üë• Users] --> CF[CloudFront]
    CF --> S3[S3 Static Hosting]
    CF --> API[API Gateway]
    
    API --> Lambda1[Lambda Function 1]
    API --> Lambda2[Lambda Function 2]
    API --> Lambda3[Lambda Function 3]
    
    Lambda1 --> DDB[(DynamoDB)]
    Lambda2 --> DDB
    Lambda3 --> DDB
    
    Lambda1 --> S3_Data[S3 Data Bucket]
    
    subgraph "Monitoring"
        CW[CloudWatch]
        XRay[X-Ray]
    end
    
    Lambda1 --> CW
    Lambda2 --> CW
    Lambda3 --> CW
    
    Lambda1 --> XRay
    Lambda2 --> XRay
    Lambda3 --> XRay
    
    classDef serverless fill:#ff9999
    classDef storage fill:#99ccff
    classDef monitoring fill:#ffcc99
    
    class Lambda1,Lambda2,Lambda3,API serverless
    class DDB,S3,S3_Data storage
    class CW,XRay monitoring
EOF
}

# „Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä
estimate_cost() {
    log_info "„Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä„ÇíË®àÁÆó„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    if ! load_requirements; then
        return 1
    fi
    
    determine_architecture_pattern
    
    # „Éë„Çø„Éº„É≥Âà•„Ç≥„Çπ„ÉàË®àÁÆó
    case "$PATTERN" in
        "simple")
            calculate_simple_cost
            ;;
        "container")
            calculate_container_cost
            ;;
        "serverless")
            calculate_serverless_cost
            ;;
    esac
    
    log_success "„Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„ÇäÂÆå‰∫Ü: $OUTPUT_DIR/cost-estimate.md"
}

# „Ç∑„É≥„Éó„É´ÊßãÊàê„ÅÆ„Ç≥„Çπ„ÉàË®àÁÆó
calculate_simple_cost() {
    cat > "$OUTPUT_DIR/cost-estimate.md" << EOF
# „Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä - „Ç∑„É≥„Éó„É´ÊßãÊàê

## ÂâçÊèêÊù°‰ª∂
- **„É™„Éº„Ç∏„Éß„É≥**: $REGION
- **ÊÉ≥ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞**: $CONCURRENT_USERS‰∫∫
- **SLO**: $SLO
- **‰∫àÁÆó‰∏äÈôê**: $COST_LIMIT USD/Êúà

## ÊúàÈ°ç„Ç≥„Çπ„ÉàË¶ãÁ©ç„ÇÇ„Çä

### „Ç≥„É≥„Éî„É•„Éº„Éà
- **EC2 (t3.medium √ó 2Âè∞)**: \$60.00
- **Application Load Balancer**: \$22.50
- **NAT Gateway**: \$45.00

### „Çπ„Éà„É¨„Éº„Ç∏„Éª„Éá„Éº„Çø„Éô„Éº„Çπ
- **RDS MySQL (t3.small)**: \$25.00
- **ElastiCache Redis (cache.t3.micro)**: \$15.00
- **S3 Standard (100GB)**: \$2.30

### „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÉªCDN
- **CloudFront (1TBËª¢ÈÄÅ)**: \$85.00
- **„Éá„Éº„ÇøËª¢ÈÄÅ**: \$20.00

### Áõ£Ë¶ñ„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£
- **CloudWatch**: \$10.00
- **Certificate Manager**: \$0.00 (ÁÑ°Êñô)

## ÂêàË®àË¶ãÁ©ç„ÇÇ„Çä

| È†ÖÁõÆ | ÊúàÈ°çË≤ªÁî® |
|------|----------|
| **ÊúÄÂ∞èÊßãÊàê** | **\$185** |
| **Êé®Â•®ÊßãÊàê** | **\$285** |
| **È´òÂèØÁî®ÊßãÊàê** | **\$485** |

## „Ç≥„Çπ„ÉàÊúÄÈÅ©ÂåñÊ°à

### Áü≠ÊúüÁöÑÊúÄÈÅ©Âåñ
- Reserved Instance Âà©Áî®„Åß 30% ÂâäÊ∏õ
- Spot Instance ‰ΩµÁî®„ÅßËøΩÂä† 20% ÂâäÊ∏õ
- S3 Intelligent-Tiering „Åß 10% ÂâäÊ∏õ

### Èï∑ÊúüÁöÑÊúÄÈÅ©Âåñ
- Auto Scaling ÊúÄÈÅ©Âåñ
- Êú™‰ΩøÁî®„É™„ÇΩ„Éº„ÇπÂÆöÊúü„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
- CloudWatch „Ç≥„Çπ„ÉàÁõ£Ë¶ñ„Ç¢„É©„Éº„ÉàË®≠ÂÆö

## ‰∫àÁÆó„Å®„ÅÆÊØîËºÉ
- **ÁèæÂú®Ë¶ãÁ©ç„ÇÇ„Çä**: \$285/Êúà
- **‰∫àÁÆó‰∏äÈôê**: \$${COST_LIMIT}/Êúà
- **Â∑ÆÈ°ç**: $(($COST_LIMIT - 285))USD/Êúà

$(if [ $COST_LIMIT -lt 285 ]; then
    echo "‚ö†Ô∏è **‰∫àÁÆó„Ç™„Éº„Éê„Éº**: ÊßãÊàê„ÅÆË¶ãÁõ¥„Åó„ÅåÂøÖË¶Å„Åß„Åô"
    echo "### ‰∫àÁÆóÂÜÖÂèéÂÆπÊ°à"
    echo "- EC2„Çí t3.small „Å´Â§âÊõ¥: -\$30"
    echo "- ElastiCache „ÇíÂâäÈô§: -\$15"
    echo "- Single AZÊßãÊàê: -\$25"
    echo "**Ë™øÊï¥Âæå**: \$215/Êúà"
else
    echo "‚úÖ **‰∫àÁÆóÂÜÖ**: ÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì"
fi)

EOF
}

# Ë®≠Ë®à„ÅÆÂ¶•ÂΩìÊÄßÊ§úË®º
validate_design() {
    log_info "Ë®≠Ë®à„ÅÆÂ¶•ÂΩìÊÄß„ÇíÊ§úË®º„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    if [ ! -f "$OUTPUT_DIR/design.md" ]; then
        log_error "Ë®≠Ë®àÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„Åö --analyze „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        return 1
    fi
    
    local validation_errors=0
    
    echo "üîç Ë®≠Ë®àÂ¶•ÂΩìÊÄßÊ§úË®º„É¨„Éù„Éº„Éà"
    echo "=========================="
    
    # SLOÈÅîÊàêÂèØËÉΩÊÄß„ÅÆÊ§úË®º
    echo ""
    echo "üìä SLOÈÅîÊàêÂèØËÉΩÊÄß:"
    case "$SLO" in
        "99.0%")
            echo "‚úÖ Single AZÊßãÊàê„ÅßÈÅîÊàêÂèØËÉΩ"
            ;;
        "99.9%")
            if [[ "$PATTERN" == "simple" ]]; then
                echo "‚ö†Ô∏è  Multi-AZÊßãÊàê„ÅåÊé®Â•®"
                ((validation_errors++))
            else
                echo "‚úÖ ÊßãÊàê„ÅßÈÅîÊàêÂèØËÉΩ"
            fi
            ;;
        "99.95%"|"99.99%")
            if [[ "$PATTERN" == "simple" ]]; then
                echo "‚ùå Âçò‰∏ÄÊßãÊàê„Åß„ÅØÈÅîÊàêÂõ∞Èõ£"
                ((validation_errors++))
            else
                echo "‚úÖ ÂÜóÈï∑ÊßãÊàê„ÅßÈÅîÊàêÂèØËÉΩ"
            fi
            ;;
    esac
    
    # ÊÄßËÉΩË¶Å‰ª∂„ÅÆÊ§úË®º
    echo ""
    echo "‚ö° ÊÄßËÉΩË¶Å‰ª∂:"
    if [ "$RESPONSE_TIME" -le 2 ]; then
        echo "‚úÖ ÂøúÁ≠îÊôÇÈñìË¶Å‰ª∂„ÅØÈÅ©Âàá"
    else
        echo "‚ö†Ô∏è  ÂøúÁ≠îÊôÇÈñìË¶Å‰ª∂„ÅåÂé≥„Åó„ÅÑÂèØËÉΩÊÄß"
        ((validation_errors++))
    fi
    
    # „Ç≥„Çπ„ÉàÊ§úË®º
    echo ""
    echo "üí∞ „Ç≥„Çπ„ÉàÊ§úË®º:"
    # Á∞°ÊòìÁöÑ„Å™„Ç≥„Çπ„ÉàÊ§úË®º
    local estimated_cost
    case "$PATTERN" in
        "simple") estimated_cost=285 ;;
        "container") estimated_cost=450 ;;
        "serverless") estimated_cost=200 ;;
    esac
    
    if [ "$COST_LIMIT" -ge "$estimated_cost" ]; then
        echo "‚úÖ ‰∫àÁÆóÂÜÖ„ÅßÂÆüÁèæÂèØËÉΩ"
    else
        echo "‚ùå ‰∫àÁÆó„Ç™„Éº„Éê„Éº: ÊßãÊàêË¶ãÁõ¥„Åó„ÅåÂøÖË¶Å"
        ((validation_errors++))
    fi
    
    # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê§úË®º
    echo ""
    echo "üîí „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ê§úË®º:"
    echo "‚úÖ VPCÂÜÖ„Éó„É©„Ç§„Éô„Éº„ÉàÈÖçÁΩÆ"
    echo "‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç∞„É´„Éº„ÉóË®≠ÂÆö"
    echo "‚úÖ ÊöóÂè∑ÂåñË®≠ÂÆö"
    echo "‚úÖ IAMÊúÄÂ∞èÊ®©ÈôêË®≠ÂÆö"
    
    # ÁµêÊûú„ÅÆË°®Á§∫
    echo ""
    if [ $validation_errors -eq 0 ]; then
        echo "‚úÖ Ê§úË®ºÂÆå‰∫Ü: Ë®≠Ë®à„Å´ÂïèÈ°å„Å™„Åó"
        log_success "Ë®≠Ë®à„ÅØË¶Å‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åô"
    else
        echo "‚ö†Ô∏è  Ê§úË®ºÂÆå‰∫Ü: ${validation_errors}ÂÄã„ÅÆÊîπÂñÑÁÇπ"
        log_warn "$validation_errors ÂÄã„ÅÆÊîπÂñÑÁÇπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü"
    fi
    
    return $validation_errors
}

# Ë®≠Ë®àÊõ∏„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export_design() {
    log_info "Ë®≠Ë®àÊõ∏„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åô..."
    
    if [ ! -f "$OUTPUT_DIR/design.md" ]; then
        log_error "Ë®≠Ë®àÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return 1
    fi
    
    local export_dir="exports"
    mkdir -p "$export_dir"
    
    # Êó•‰ªò‰ªò„Åç„Éï„Ç°„Ç§„É´Âêç
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local export_file="$export_dir/architecture_design_$timestamp.md"
    
    # „É°„Çø„Éá„Éº„Çø‰ªò„Åç„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà
    cat > "$export_file" << EOF
# „Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®àÊõ∏Ôºà„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÁâàÔºâ

**„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊó•ÊôÇ**: $(date '+%Y-%m-%d %H:%M:%S')  
**„Ç®„ÇØ„Çπ„Éù„Éº„ÉàËÄÖ**: Architect Agent v${AGENT_VERSION}  
**„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥**: $PATTERN_NAME  

---

EOF
    
    cat "$OUTPUT_DIR/design.md" >> "$export_file"
    
    # CloudFormation„ÇÇ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
    if [ -f "$AWS_DIR/cloudformation.yaml" ]; then
        local cf_export="$export_dir/cloudformation_$timestamp.yaml"
        cp "$AWS_DIR/cloudformation.yaml" "$cf_export"
        log_success "CloudFormation„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇÇ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü: $cf_export"
    fi
    
    log_success "Ë®≠Ë®àÊõ∏„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü: $export_file"
    
    # Áµ±Ë®àÊÉÖÂ†±„ÅÆÁîüÊàê
    echo ""
    echo "üìä Ë®≠Ë®àÁµ±Ë®à:"
    echo "- Ë®≠Ë®àÊõ∏„Çµ„Ç§„Ç∫: $(wc -c < "$OUTPUT_DIR/design.md") bytes"
    echo "- Ë®≠Ë®àÊõ∏Ë°åÊï∞: $(wc -l < "$OUTPUT_DIR/design.md")"
    echo "- „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éë„Çø„Éº„É≥: $PATTERN_NAME"
    echo "- Êé®ÂÆöÊúàÈ°ç„Ç≥„Çπ„Éà: $(case "$PATTERN" in "simple") echo "\$285" ;; "container") echo "\$450" ;; "serverless") echo "\$200" ;; esac)"
}

# „É°„Ç§„É≥Âá¶ÁêÜ
main() {
    echo "üèóÔ∏è $AGENT_NAME v$AGENT_VERSION"
    echo "================================"
    
    # ÂàùÊúüÂåñ
    init_architect
    
    # ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    case "$1" in
        --analyze)
            analyze_architecture
            ;;
        --generate)
            if ! load_requirements; then
                exit 1
            fi
            determine_architecture_pattern
            generate_cloudformation "$2"
            ;;
        --diagram)
            if ! load_requirements; then
                exit 1
            fi
            determine_architecture_pattern
            generate_diagram
            ;;
        --estimate)
            estimate_cost
            ;;
        --validate)
            validate_design
            ;;
        --export)
            export_design
            ;;
        --help|"")
            show_usage
            ;;
        *)
            log_error "‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥: $1"
            show_usage
            exit 1
            ;;
    esac
}

# ÂÆüË°å
main "$@"